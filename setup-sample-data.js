import * as SQLite from 'expo-sqlite';

// Sample data setup script for BudgetFlow testing
const setupSampleData = async () => {
  try {
    const db = await SQLite.openDatabaseAsync('budgetflow.db');
    
    console.log('üöÄ Setting up sample data for testing...');
    
    // Clear existing data (optional - for fresh testing)
    await db.execAsync(`
      DELETE FROM expenses;
      DELETE FROM categories;
      DELETE FROM funders;
      DELETE FROM helpers;
      UPDATE budget SET total_budget = 0, received_fund = 0, people_over_fund = 0, remaining_fund = 0;
    `);
    
    // 1. Create sample categories
    console.log('üìÇ Creating sample categories...');
    const categories = [
      '‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑É‡∑Ñ ‡∂¥‡∑è‡∂± (Food & Drinks)',
      '‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂± (Transportation)', 
      '‡∑Ä‡∑í‡∂±‡∑ù‡∂Ø‡∑è‡∑É‡∑ä‡∑Ä‡∑è‡∂Ø‡∂∫ (Entertainment)',
      '‡∂Ö‡∂∞‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∂±‡∂∫ (Education)',
      '‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∑É‡∑ö‡∑Ä‡∑è (Healthcare)',
      '‡∂ú‡∑ò‡∑Ñ ‡∂ö‡∂ß‡∂∫‡∑î‡∂≠‡∑î (Household)',
      '‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∑è‡∂Ω ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä (Office Expenses)',
      '‡∂¢‡∑Ä‡∂±‡∑í‡∂ö‡∑è ‡∑É‡∑Ñ ‡∂á‡∂≥‡∑î‡∂∏‡∑ä (Clothing)',
      '‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂∂‡∑í‡∂Ω‡∑ä‡∂¥‡∂≠‡∑ä (Bills & Utilities)',
      '‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è ‡∑É‡∑Ñ ‡∂∫‡∑ù‡∂ú‡∑ä‚Äç‡∂∫‡∂≠‡∑è (Sports & Fitness)'
    ];
    
    for (const categoryName of categories) {
      await db.runAsync(
        'INSERT INTO categories (name, created_at, updated_at) VALUES (?, datetime("now"), datetime("now"))',
        [categoryName]
      );
    }
    
    // 2. Create sample funders
    console.log('üë• Creating sample funders...');
    const funders = [
      '‡∂ö‡∑ô‡∑É‡∂ª ‡∂∏‡∑Ñ‡∂≠‡∑ä‡∂≠‡∂∫‡∑è (Kesara Sir)',
      '‡∑É‡∂∏‡∑è‡∂ú‡∂∏ ‡∂∏‡∑î‡∂Ω‡∑ä‚Äç‡∂∫ ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Company Fund)',
      '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
      '‡∂∏‡∑í‡∂≠‡∑î‡∂ª‡∂±‡∑ä‡∂ú‡∑ö ‡∑É‡∑Ñ‡∑è‡∂∫ (Friends Support)',
      '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
      '‡∑Ä‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∑è‡∂ª‡∑í‡∂ö ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏ (Business Income)',
      '‡∂Ö‡∂∏‡∂≠‡∂ª ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏ (Extra Income)',
      '‡∂´‡∂∫ ‡∑É‡∑Ñ‡∑è‡∂∫ (Loan Support)'
    ];
    
    for (const funderName of funders) {
      await db.runAsync(
        'INSERT INTO funders (name, created_at, updated_at) VALUES (?, datetime("now"), datetime("now"))',
        [funderName]
      );
    }
    
    // Get created category and funder IDs
    const categoriesResult = await db.getAllAsync('SELECT id, name FROM categories');
    const fundersResult = await db.getAllAsync('SELECT id, name FROM funders');
    
    // 3. Create comprehensive sample expenses
    console.log('üí∞ Creating sample expenses...');
    const expenses = [
      // Food & Drinks expenses
      {
        title: '‡∑É‡∂≠‡∑í ‡∂Ö‡∂±‡∑ä‡∂≠ ‡∂Ö‡∂¥‡∑ö ‡∂ö‡∂©‡∑ö ‡∂ú‡∑í‡∂∫ ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏',
        amount: 15000,
        status: 'Received',
        category: '‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑É‡∑Ñ ‡∂¥‡∑è‡∂± (Food & Drinks)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: '‡∂î‡∑Ü‡∑í‡∑É‡∑ä ‡∂ë‡∂ö‡∑ö lunch ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏',
        amount: 8500,
        status: 'Spent',
        category: '‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑É‡∑Ñ ‡∂¥‡∑è‡∂± (Food & Drinks)',
        funder: '‡∑É‡∂∏‡∑è‡∂ú‡∂∏ ‡∂∏‡∑î‡∂Ω‡∑ä‚Äç‡∂∫ ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Company Fund)',
        assignedTo: '‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏'
      },
      {
        title: '‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂Ö‡∑Ä‡∑î‡∂ª‡∑î‡∂Ø‡∑ä‡∂Ø‡∂ß ‡∂ö‡∑ö‡∂ö‡∑ä ‡∂á‡∂´‡∑Ä‡∑î‡∂∏',
        amount: 25000,
        status: 'Outstanding',
        category: '‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑É‡∑Ñ ‡∂¥‡∑è‡∂± (Food & Drinks)',
        funder: '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
        assignedTo: '‡∂Ö‡∂∏‡∑ä‡∂∏‡∑è'
      },
      
      // Transportation expenses
      {
        title: '‡∂∏‡∑è‡∑É‡∑í‡∂ö ‡∂∂‡∑É‡∑ä ‡∂¥‡∑è‡∑É‡∑ä ‡∂ë‡∂ö',
        amount: 12000,
        status: 'Received',
        category: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂± (Transportation)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: '‡∂≠‡∑ä‚Äç‡∂ª‡∑ì ‡∑Ä‡∑ì‡∂Ω‡∂ª‡∑ä ‡∂ö‡∑î‡∂Ω‡∑ì',
        amount: 3500,
        status: 'Spent',
        category: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂± (Transportation)',
        funder: '‡∂Ö‡∂∏‡∂≠‡∂ª ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏ (Extra Income)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: '‡∑Ä‡∑ë‡∂±‡∑ä ‡∂ë‡∂ö‡∑ö fuel ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏',
        amount: 18000,
        status: 'Pending',
        category: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂± (Transportation)',
        funder: '‡∑Ä‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∑è‡∂ª‡∑í‡∂ö ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏ (Business Income)',
        assignedTo: '‡∂©‡∑ä‚Äç‡∂ª‡∂∫‡∑í‡∑Ä‡∂ª‡∑ä'
      },
      
      // Entertainment expenses
      {
        title: 'cinema tickets ‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂ë‡∂ö‡∑ä‡∂ö',
        amount: 6000,
        status: 'Spent',
        category: '‡∑Ä‡∑í‡∂±‡∑ù‡∂Ø‡∑è‡∑É‡∑ä‡∑Ä‡∑è‡∂Ø‡∂∫ (Entertainment)',
        funder: '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
        assignedTo: '‡∂¥‡∑Ä‡∑î‡∂Ω'
      },
      {
        title: 'Netflix subscription ‡∂∏‡∑è‡∑É‡∑í‡∂ö',
        amount: 2500,
        status: 'Outstanding',
        category: '‡∑Ä‡∑í‡∂±‡∑ù‡∂Ø‡∑è‡∑É‡∑ä‡∑Ä‡∑è‡∂Ø‡∂∫ (Entertainment)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: '‡∂î‡∑Ü‡∑í‡∑É‡∑ä ‡∂ë‡∂ö‡∑ö party organizing',
        amount: 45000,
        status: 'Pending',
        category: '‡∑Ä‡∑í‡∂±‡∑ù‡∂Ø‡∑è‡∑É‡∑ä‡∑Ä‡∑è‡∂Ø‡∂∫ (Entertainment)',
        funder: '‡∑É‡∂∏‡∑è‡∂ú‡∂∏ ‡∂∏‡∑î‡∂Ω‡∑ä‚Äç‡∂∫ ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Company Fund)',
        assignedTo: '‡∑É‡∂∏‡∑í‡∂≠‡∑í ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä'
      },
      
      // Education expenses
      {
        title: 'programming course fee',
        amount: 85000,
        status: 'Received',
        category: '‡∂Ö‡∂∞‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∂±‡∂∫ (Education)',
        funder: '‡∂ö‡∑ô‡∑É‡∂ª ‡∂∏‡∑Ñ‡∂≠‡∑ä‡∂≠‡∂∫‡∑è (Kesara Sir)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: 'books ‡∑É‡∑Ñ stationery',
        amount: 12000,
        status: 'Spent',
        category: '‡∂Ö‡∂∞‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∂±‡∂∫ (Education)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: 'laptop upgrade ‡∂ö‡∂ª‡∂±‡∑ä‡∂±',
        amount: 150000,
        status: 'Outstanding',
        category: '‡∂Ö‡∂∞‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∂±‡∂∫ (Education)',
        funder: '‡∂´‡∂∫ ‡∑É‡∑Ñ‡∑è‡∂∫ (Loan Support)',
        assignedTo: '‡∂∏‡∂∏'
      },
      
      // Healthcare expenses
      {
        title: '‡∂∏‡∑è‡∑É‡∑í‡∂ö checkup ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏',
        amount: 8000,
        status: 'Spent',
        category: '‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∑É‡∑ö‡∑Ä‡∑è (Healthcare)',
        funder: '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
        assignedTo: '‡∂¥‡∑Ä‡∑î‡∂Ω'
      },
      {
        title: '‡∂Ø‡∂≠‡∑ä ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑í‡∂∫ ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏',
        amount: 15000,
        status: 'Received',
        category: '‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∑É‡∑ö‡∑Ä‡∑è (Healthcare)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: '‡∑Ä‡∑í‡∂ß‡∂∏‡∑í‡∂±‡∑ä ‡∑É‡∑Ñ supplements',
        amount: 6500,
        status: 'Pending',
        category: '‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∑É‡∑ö‡∑Ä‡∑è (Healthcare)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      
      // Household expenses
      {
        title: '‡∂ú‡∑ô‡∂Ø‡∂ª cleaning supplies',
        amount: 4500,
        status: 'Spent',
        category: '‡∂ú‡∑ò‡∑Ñ ‡∂ö‡∂ß‡∂∫‡∑î‡∂≠‡∑î (Household)',
        funder: '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
        assignedTo: '‡∂Ö‡∂∏‡∑ä‡∂∏‡∑è'
      },
      {
        title: 'electricity bill ‡∂∏‡∑è‡∑É‡∑í‡∂ö',
        amount: 12000,
        status: 'Outstanding',
        category: '‡∂ú‡∑ò‡∑Ñ ‡∂ö‡∂ß‡∂∫‡∑î‡∂≠‡∑î (Household)',
        funder: '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
        assignedTo: '‡∂≠‡∑è‡∂≠‡∑ä‡∂≠‡∑è'
      },
      {
        title: 'kitchen equipment ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂ú‡∂±‡∑ä‡∂±',
        amount: 35000,
        status: 'Pending',
        category: '‡∂ú‡∑ò‡∑Ñ ‡∂ö‡∂ß‡∂∫‡∑î‡∂≠‡∑î (Household)',
        funder: '‡∑Ä‡∑ä‚Äç‡∂∫‡∑è‡∂¥‡∑è‡∂ª‡∑í‡∂ö ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏ (Business Income)',
        assignedTo: '‡∂¥‡∑Ä‡∑î‡∂Ω'
      },
      
      // Office expenses
      {
        title: 'stationery ‡∑É‡∑Ñ printing',
        amount: 8500,
        status: 'Received',
        category: '‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∑è‡∂Ω ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä (Office Expenses)',
        funder: '‡∑É‡∂∏‡∑è‡∂ú‡∂∏ ‡∂∏‡∑î‡∂Ω‡∑ä‚Äç‡∂∫ ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Company Fund)',
        assignedTo: '‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∑è‡∂Ω‡∂∫'
      },
      {
        title: 'internet bill ‡∂î‡∑Ü‡∑í‡∑É‡∑ä ‡∂ë‡∂ö‡∂ß',
        amount: 15000,
        status: 'Spent',
        category: '‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∑è‡∂Ω ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä (Office Expenses)',
        funder: '‡∑É‡∂∏‡∑è‡∂ú‡∂∏ ‡∂∏‡∑î‡∂Ω‡∑ä‚Äç‡∂∫ ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Company Fund)',
        assignedTo: 'IT team'
      },
      
      // Clothing expenses
      {
        title: '‡∂î‡∑Ü‡∑í‡∑É‡∑ä wear ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂ú‡∂±‡∑ä‡∂±',
        amount: 25000,
        status: 'Outstanding',
        category: '‡∂¢‡∑Ä‡∂±‡∑í‡∂ö‡∑è ‡∑É‡∑Ñ ‡∂á‡∂≥‡∑î‡∂∏‡∑ä (Clothing)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: 'sports shoes ‡∂ú‡∂±‡∑ä‡∂±',
        amount: 18000,
        status: 'Pending',
        category: '‡∂¢‡∑Ä‡∂±‡∑í‡∂ö‡∑è ‡∑É‡∑Ñ ‡∂á‡∂≥‡∑î‡∂∏‡∑ä (Clothing)',
        funder: '‡∂Ö‡∂∏‡∂≠‡∂ª ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏ (Extra Income)',
        assignedTo: '‡∂∏‡∂∏'
      },
      
      // Bills & Utilities
      {
        title: 'mobile bill ‡∂∏‡∑è‡∑É‡∑í‡∂ö',
        amount: 3500,
        status: 'Spent',
        category: '‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂∂‡∑í‡∂Ω‡∑ä‡∂¥‡∂≠‡∑ä (Bills & Utilities)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: 'water bill ‡∂∏‡∑è‡∑É‡∑í‡∂ö',
        amount: 2800,
        status: 'Outstanding',
        category: '‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂∂‡∑í‡∂Ω‡∑ä‡∂¥‡∂≠‡∑ä (Bills & Utilities)',
        funder: '‡∂¥‡∑Ä‡∑î‡∂Ω‡∑ö ‡∂Ö‡∂ª‡∂∏‡∑î‡∂Ø‡∂Ω (Family Fund)',
        assignedTo: '‡∂≠‡∑è‡∂≠‡∑ä‡∂≠‡∑è'
      },
      
      // Sports & Fitness
      {
        title: 'gym membership ‡∂∏‡∑è‡∑É‡∑í‡∂ö',
        amount: 8000,
        status: 'Received',
        category: '‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è ‡∑É‡∑Ñ ‡∂∫‡∑ù‡∂ú‡∑ä‚Äç‡∂∫‡∂≠‡∑è (Sports & Fitness)',
        funder: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Personal Savings)',
        assignedTo: '‡∂∏‡∂∏'
      },
      {
        title: 'swimming pool entry',
        amount: 1500,
        status: 'Spent',
        category: '‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è ‡∑É‡∑Ñ ‡∂∫‡∑ù‡∂ú‡∑ä‚Äç‡∂∫‡∂≠‡∑è (Sports & Fitness)',
        funder: '‡∂∏‡∑í‡∂≠‡∑î‡∂ª‡∂±‡∑ä‡∂ú‡∑ö ‡∑É‡∑Ñ‡∑è‡∂∫ (Friends Support)',
        assignedTo: '‡∂∏‡∂∏'
      }
    ];
    
    // Insert expenses
    for (const expense of expenses) {
      const category = categoriesResult.find(c => c.name === expense.category);
      const funder = fundersResult.find(f => f.name === expense.funder);
      
      if (category && funder) {
        await db.runAsync(
          `INSERT INTO expenses (title, amount, status, category_id, funder_id, assigned_to, created_at, updated_at) 
           VALUES (?, ?, ?, ?, ?, ?, datetime("now"), datetime("now"))`,
          [expense.title, expense.amount, expense.status, category.id, funder.id, expense.assignedTo]
        );
      }
    }
    
    // 4. Create some helpers
    console.log('üë∑ Creating sample helpers...');
    const helpers = [
      '‡∑É‡∂∏‡∂±‡∑ä‡∂≠ (Samantha)',
      '‡∂ö‡∑É‡∑î‡∂±‡∑ä (Kasun)', 
      '‡∂≠‡∂ª‡∑í‡∂Ø‡∑î (Tharidu)',
      '‡∂±‡∑í‡∂∏‡∂Ω‡∑ä (Nimal)',
      '‡∑É‡∑î‡∂±‡∑í‡∂Ω‡∑ä (Sunil)'
    ];
    
    for (const helperName of helpers) {
      await db.runAsync(
        'INSERT INTO helpers (name, created_at) VALUES (?, datetime("now"))',
        [helperName]
      );
    }
    
    // 5. Update budget summary
    console.log('üìä Updating budget summary...');
    const allExpenses = await db.getAllAsync('SELECT amount, status FROM expenses');
    const totalBudget = allExpenses.reduce((sum, exp) => sum + (exp.amount || 0), 0);
    const receivedFund = allExpenses
      .filter(exp => exp.status === 'Received')
      .reduce((sum, exp) => sum + (exp.amount || 0), 0);
    const remainingFund = totalBudget - receivedFund;
    
    await db.runAsync(
      'UPDATE budget SET total_budget = ?, received_fund = ?, remaining_fund = ?, updated_at = datetime("now") WHERE id = 1',
      [totalBudget, receivedFund, remainingFund]
    );
    
    console.log('‚úÖ Sample data setup completed successfully!');
    console.log(`üìã Created:`);
    console.log(`   - ${categories.length} categories`);
    console.log(`   - ${funders.length} funders`);
    console.log(`   - ${expenses.length} expenses`);
    console.log(`   - ${helpers.length} helpers`);
    console.log(`   - Budget total: Rs. ${totalBudget.toLocaleString()}`);
    console.log(`   - Received: Rs. ${receivedFund.toLocaleString()}`);
    console.log(`   - Remaining: Rs. ${remainingFund.toLocaleString()}`);
    
    return {
      success: true,
      data: {
        categories: categories.length,
        funders: funders.length,
        expenses: expenses.length,
        helpers: helpers.length,
        totalBudget,
        receivedFund,
        remainingFund
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error setting up sample data:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Test data verification function
const verifySampleData = async () => {
  try {
    const db = await SQLite.openDatabaseAsync('budgetflow.db');
    
    console.log('üîç Verifying sample data...');
    
    const categories = await db.getAllAsync('SELECT COUNT(*) as count FROM categories');
    const expenses = await db.getAllAsync('SELECT COUNT(*) as count FROM expenses');
    const funders = await db.getAllAsync('SELECT COUNT(*) as count FROM funders');
    const helpers = await db.getAllAsync('SELECT COUNT(*) as count FROM helpers');
    
    const statusBreakdown = await db.getAllAsync(`
      SELECT status, COUNT(*) as count, SUM(amount) as total 
      FROM expenses 
      GROUP BY status
    `);
    
    const categoryBreakdown = await db.getAllAsync(`
      SELECT c.name, COUNT(e.id) as expense_count, SUM(e.amount) as total_amount
      FROM categories c
      LEFT JOIN expenses e ON c.id = e.category_id
      GROUP BY c.id, c.name
      ORDER BY total_amount DESC
    `);
    
    console.log('üìä Data Verification Results:');
    console.log(`   Categories: ${categories[0].count}`);
    console.log(`   Expenses: ${expenses[0].count}`);
    console.log(`   Funders: ${funders[0].count}`);
    console.log(`   Helpers: ${helpers[0].count}`);
    
    console.log('\nüìà Status Breakdown:');
    statusBreakdown.forEach(status => {
      console.log(`   ${status.status}: ${status.count} expenses, Rs. ${status.total?.toLocaleString() || 0}`);
    });
    
    console.log('\nüìÇ Top Categories by Amount:');
    categoryBreakdown.slice(0, 5).forEach(cat => {
      console.log(`   ${cat.name}: ${cat.expense_count} expenses, Rs. ${cat.total_amount?.toLocaleString() || 0}`);
    });
    
    return {
      success: true,
      summary: {
        categories: categories[0].count,
        expenses: expenses[0].count,
        funders: funders[0].count,
        helpers: helpers[0].count,
        statusBreakdown,
        categoryBreakdown
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error verifying data:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

export { setupSampleData, verifySampleData };